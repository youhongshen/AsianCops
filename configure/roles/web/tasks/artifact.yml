- name: copy artifact to remote
  copy: src={{ artifact_local_dir }}/{{ artifact }} dest=/tmp force=true
  become: yes
  become_user: "{{ app_user }}"

- name: deploys artifact
  pip: name=/tmp/{{ artifact }} virtualenv={{ venv }}
  become: yes
  become_user: "{{ app_user }}"

- name: upgrade artifact
  pip:
    name: "/tmp/{{ artifact }}"
    virtualenv: "{{ venv }}"
    extra_args: "--upgrade --force-reinstall --no-deps"
  become: yes
  become_user: "{{ app_user }}"

- name: deliver the password files
  copy:
    content: "{{ item.content }}"
    dest: "{{ app_path }}/{{ item.file }}"
    mode: 0600
  with_items:
  - { 'content': "{{ secure_vars.rds.master_db_password }}", 'file': 'db-password.txt' }
  - { 'content': "{{ secure_vars.django.prod_secret_key }}", 'file': 'secret-key.txt' }
  become: yes
  become_user: "{{ app_user }}"

- name: deliver the db env file
  template: src=config.json dest={{ app_path }}
  become: yes
  become_user: "{{ app_user }}"

# TODO figure out how to exclude it from the package
- name: remove db.sqlite3
  file: path={{ app_path }}/db.sqlite3 state=absent
  become: yes
  become_user: "{{ app_user }}"

- name: run django collectstatic
  django_manage:
    command: collectstatic
    virtualenv: "{{ venv }}"
    app_path: "{{ venv }}/bin"
    settings: AsianCops.settings.production
    pythonpath: "{{ app_path }}"
  become: yes
  become_user: "{{ app_user }}"

- name: run django migrate
  django_manage:
    command: migrate
    virtualenv: "{{ venv }}"
#    manage.py is packaged as a script
    app_path: "{{ venv }}/bin"
    settings: AsianCops.settings.production
    pythonpath: "{{ app_path }}"
#  environment: "{{ db_env }}"
  become: yes
  become_user: "{{ app_user }}"
  run_once: yes


