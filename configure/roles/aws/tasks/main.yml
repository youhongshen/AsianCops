- name: create security group for a web server
  ec2_group:
    name: asiancops_web_group
    description: rules for a web server
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
#        for testing
      - proto: tcp
        from_port: 8000
        to_port: 8000
        cidr_ip: "{{ my_ip }}"
#        for nginx to talk to gunicorn
      - proto: tcp
        from_port: 8000
        to_port: 8000
        group_id: asiancops_web_group
  tags: sg

- name: create security group for mysql
  ec2_group:
    name: asiancops_mysql_group
    description: rules for a mysql DB
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 3306
        to_port: 3306
        group_id: asiancops_web_group
      - proto: all
        group_name: asiancops_mysql_group
  tags: sg

# new in 2.3
#- name: get group facts
#  ec2_group_facts:
#  register: group_facts
#  tags: sg

- name: create EC2 instance
  ec2:
    key_name: "{{ ec2.key_name }}"
    instance_type: "{{ ec2.instance_type }}"
    image: "{{ ec2.image }}"
    group: "{{ ec2.security_group }}"
    wait: yes
    assign_public_ip: yes
    region: "{{ region }}"
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    count: 1
#    instance tag of workload_other creating a separate group the way it works for RDFS
#does not apply to EC2 instances
    instance_tags:
      group: asiancops_web
  register: ec2
  tags: ec2

- name: create RDS instance
  rds:
    command: create
    instance_name: asian-cops-prod
    db_engine: MySQL
    instance_type: "{{ rds.instance_type }}"
    username: admin
    password: "{{ secure_vars.rds.master_db_password }}"
    backup_retention: 7
    db_name: wagtail
    engine_version: 5.6.27
    license_model: general-public-license
    port: 3306
    publicly_accessible: yes
    region: "{{ region }}"
#    TODO use the ec2_group_facts module to look up the security group id
    vpc_security_groups: sg-e77d459a
    subnet: "{{ rds.subnet }}"
#    5GB
    size: 5
# - the tag workload_type = other on a RDS seems to create a group like this in ansible
#  "asian-cops-prod": [
#    "asian-cops-prod.cn0m6pjilrg2.us-east-1.rds.amazonaws.com"
#  ],
# - adding other tags on a RDS instance doesn't seem to do anything for ansible
# - why its called instance_tags for ec2 but tags for rds?
    tags:
      workload_type: other
  tags: rds

